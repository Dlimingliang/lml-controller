/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Dlimingliang/lml-controller/pkg/apis/lmlcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LmlLister helps list Lmls.
// All objects returned here must be treated as read-only.
type LmlLister interface {
	// List lists all Lmls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lml, err error)
	// Lmls returns an object that can list and get Lmls.
	Lmls(namespace string) LmlNamespaceLister
	LmlListerExpansion
}

// lmlLister implements the LmlLister interface.
type lmlLister struct {
	indexer cache.Indexer
}

// NewLmlLister returns a new LmlLister.
func NewLmlLister(indexer cache.Indexer) LmlLister {
	return &lmlLister{indexer: indexer}
}

// List lists all Lmls in the indexer.
func (s *lmlLister) List(selector labels.Selector) (ret []*v1.Lml, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lml))
	})
	return ret, err
}

// Lmls returns an object that can list and get Lmls.
func (s *lmlLister) Lmls(namespace string) LmlNamespaceLister {
	return lmlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LmlNamespaceLister helps list and get Lmls.
// All objects returned here must be treated as read-only.
type LmlNamespaceLister interface {
	// List lists all Lmls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lml, err error)
	// Get retrieves the Lml from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Lml, error)
	LmlNamespaceListerExpansion
}

// lmlNamespaceLister implements the LmlNamespaceLister
// interface.
type lmlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lmls in the indexer for a given namespace.
func (s lmlNamespaceLister) List(selector labels.Selector) (ret []*v1.Lml, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lml))
	})
	return ret, err
}

// Get retrieves the Lml from the indexer for a given namespace and name.
func (s lmlNamespaceLister) Get(name string) (*v1.Lml, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("lml"), name)
	}
	return obj.(*v1.Lml), nil
}
